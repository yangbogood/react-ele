{"version":3,"sources":["../node_modules/q/q.js","../node_modules/timers-browserify/main.js","../node_modules/setimmediate/setImmediate.js"],"names":["definition","bootstrap","module","exports","hasStacks","Error","e","stack","qFileName","qStartingLine","captureLine","noop","nextTick","head","task","next","tail","flushing","requestTick","isNodeJS","laterQueue","flush","domain","enter","runSingle","length","pop","exit","setTimeout","process","toString","setImmediate","window","bind","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","runAfter","push","call","Function","uncurryThis","f","apply","arguments","QReturnValue","array_slice","Array","prototype","slice","array_reduce","reduce","callback","basis","index","this","TypeError","array_indexOf","indexOf","value","i","array_map","map","thisp","self","collect","undefined","object_create","Object","create","Type","object_defineProperty","defineProperty","obj","prop","descriptor","object_hasOwnProperty","hasOwnProperty","object_keys","keys","object","key","object_toString","isStopIteration","exception","ReturnValue","STACK_JUMP_SEPARATOR","makeStackTraceLong","error","promise","stacks","p","source","__minimumStackCounter__","stackCounter","configurable","unshift","stackString","lines","split","desiredLines","line","isInternalFrame","stackLine","join","filterStackString","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qEndingLine","Q","Promise","isPromiseAlike","deferred","defer","then","resolve","reject","notify","coerce","fulfill","longStackSupport","longStackCounter","resolvedPromise","messages","progressListeners","promiseDispatch","op","operands","args","valueOf","nearerValue","nearer","isPromise","inspect","state","substring","become","newPromise","message","reason","progress","progressListener","resolver","race","answerPs","len","fallback","result","inspected","when","fulfilled","rejected","progressed","Q_DEBUG","makeNodeResolver","all","passByCopy","x","y","that","spread","makePromise","done","_fulfilled","newException","_rejected","newValue","threw","_progressed","onerror","tap","fcall","thenResolve","thenReject","isPending","isFulfilled","isRejected","name","alternative","unhandledReasons","unhandledRejections","reportedUnhandledRejections","trackUnhandledRejections","resetUnhandledRejections","rejection","at","emit","atReport","splice","untrackRejection","trackRejection","rhs","dispatch","promises","pendingCount","snapshot","any","prev","current","err","allResolved","getUnhandledReasons","stopUnhandledRejectionTracking","master","array","async","makeGenerator","continuer","verb","arg","StopIteration","generator","errback","spawn","promised","get","set","del","mapply","post","send","mcall","invoke","fapply","fbind","concat","console","warn","allSettled","regardless","fail","fin","onUnhandledError","timeout","ms","timeoutId","code","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","nodeify","nodeback","noConflict","Timeout","id","clearFn","_id","_clearFn","scope","setInterval","clearInterval","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","global","clearImmediate","registerImmediate","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","messagePrefix","Math","random","onGlobalMessage","event","data","addEventListener","attachEvent","installPostMessageImplementation","installMessageChannelImplementation","createElement","html","documentElement","script","onreadystatechange","removeChild","appendChild","installReadyStateChangeImplementation","run"],"mappings":"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","file":"static/js/2.fadf3be8.chunk.js","sourcesContent":["// vim:ts=4:sts=4:sw=4:\n\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n(function (definition) {\n  \"use strict\"; // This file will function properly as a <script> tag, or a module\n  // using CommonJS and NodeJS or RequireJS module formats.  In\n  // Common/Node/RequireJS, the module exports the Q API and when\n  // executed as a simple <script>, it creates a Q global instead.\n  // Montage Require\n\n  if (typeof bootstrap === \"function\") {\n    bootstrap(\"promise\", definition); // CommonJS\n  } else if (typeof exports === \"object\" && typeof module === \"object\") {\n    module.exports = definition(); // RequireJS\n  } else if (typeof define === \"function\" && define.amd) {\n    define(definition); // SES (Secure EcmaScript)\n  } else if (typeof ses !== \"undefined\") {\n    if (!ses.ok()) {\n      return;\n    } else {\n      ses.makeQ = definition;\n    } // <script>\n\n  } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n    // Prefer window over self for add-on scripts. Use self for\n    // non-windowed contexts.\n    var global = typeof window !== \"undefined\" ? window : self; // Get the `window` object, save the previous Q global\n    // and initialize Q as a global.\n\n    var previousQ = global.Q;\n    global.Q = definition(); // Add a noConflict function so Q can be removed from the\n    // global namespace.\n\n    global.Q.noConflict = function () {\n      global.Q = previousQ;\n      return this;\n    };\n  } else {\n    throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n  }\n})(function () {\n  \"use strict\";\n\n  var hasStacks = false;\n\n  try {\n    throw new Error();\n  } catch (e) {\n    hasStacks = !!e.stack;\n  } // All code after this point will be filtered from stack traces reported\n  // by Q.\n\n\n  var qStartingLine = captureLine();\n  var qFileName; // shims\n  // used for fallback in \"allResolved\"\n\n  var noop = function noop() {}; // Use the fastest possible means to execute a task in a future turn\n  // of the event loop.\n\n\n  var nextTick = function () {\n    // linked list of tasks (single, with head node)\n    var head = {\n      task: void 0,\n      next: null\n    };\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false; // queue for late tasks, used by unhandled rejection tracking\n\n    var laterQueue = [];\n\n    function flush() {\n      /* jshint loopfunc: true */\n      var task, domain;\n\n      while (head.next) {\n        head = head.next;\n        task = head.task;\n        head.task = void 0;\n        domain = head.domain;\n\n        if (domain) {\n          head.domain = void 0;\n          domain.enter();\n        }\n\n        runSingle(task, domain);\n      }\n\n      while (laterQueue.length) {\n        task = laterQueue.pop();\n        runSingle(task);\n      }\n\n      flushing = false;\n    } // runs a single function in the async queue\n\n\n    function runSingle(task, domain) {\n      try {\n        task();\n      } catch (e) {\n        if (isNodeJS) {\n          // In node, uncaught exceptions are considered fatal errors.\n          // Re-throw them synchronously to interrupt flushing!\n          // Ensure continuation if the uncaught exception is suppressed\n          // listening \"uncaughtException\" events (as domains does).\n          // Continue in next event to avoid tick recursion.\n          if (domain) {\n            domain.exit();\n          }\n\n          setTimeout(flush, 0);\n\n          if (domain) {\n            domain.enter();\n          }\n\n          throw e;\n        } else {\n          // In browsers, uncaught exceptions are not fatal.\n          // Re-throw them asynchronously to avoid slow-downs.\n          setTimeout(function () {\n            throw e;\n          }, 0);\n        }\n      }\n\n      if (domain) {\n        domain.exit();\n      }\n    }\n\n    nextTick = function nextTick(task) {\n      tail = tail.next = {\n        task: task,\n        domain: isNodeJS && process.domain,\n        next: null\n      };\n\n      if (!flushing) {\n        flushing = true;\n        requestTick();\n      }\n    };\n\n    if (typeof process === \"object\" && process.toString() === \"[object process]\" && process.nextTick) {\n      // Ensure Q is in a real Node environment, with a `process.nextTick`.\n      // To see through fake Node environments:\n      // * Mocha test runner - exposes a `process` global without a `nextTick`\n      // * Browserify - exposes a `process.nexTick` function that uses\n      //   `setTimeout`. In this case `setImmediate` is preferred because\n      //    it is faster. Browserify's `process.toString()` yields\n      //   \"[object Object]\", while in a real Node environment\n      //   `process.toString()` yields \"[object process]\".\n      isNodeJS = true;\n\n      requestTick = function requestTick() {\n        process.nextTick(flush);\n      };\n    } else if (typeof setImmediate === \"function\") {\n      // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n      if (typeof window !== \"undefined\") {\n        requestTick = setImmediate.bind(window, flush);\n      } else {\n        requestTick = function requestTick() {\n          setImmediate(flush);\n        };\n      }\n    } else if (typeof MessageChannel !== \"undefined\") {\n      // modern browsers\n      // http://www.nonblocking.io/2011/06/windownexttick.html\n      var channel = new MessageChannel(); // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n      // working message ports the first time a page loads.\n\n      channel.port1.onmessage = function () {\n        requestTick = requestPortTick;\n        channel.port1.onmessage = flush;\n        flush();\n      };\n\n      var requestPortTick = function requestPortTick() {\n        // Opera requires us to provide a message payload, regardless of\n        // whether we use it.\n        channel.port2.postMessage(0);\n      };\n\n      requestTick = function requestTick() {\n        setTimeout(flush, 0);\n        requestPortTick();\n      };\n    } else {\n      // old browsers\n      requestTick = function requestTick() {\n        setTimeout(flush, 0);\n      };\n    } // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n\n\n    nextTick.runAfter = function (task) {\n      laterQueue.push(task);\n\n      if (!flushing) {\n        flushing = true;\n        requestTick();\n      }\n    };\n\n    return nextTick;\n  }(); // Attempt to make generics safe in the face of downstream\n  // modifications.\n  // There is no situation where this is necessary.\n  // If you need a security guarantee, these primordials need to be\n  // deeply frozen anyway, and if you don’t need a security guarantee,\n  // this is just plain paranoid.\n  // However, this **might** have the nice side-effect of reducing the size of\n  // the minified code by reducing x.call() to merely x()\n  // See Mark Miller’s explanation of what this does.\n  // http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n\n\n  var call = Function.call;\n\n  function uncurryThis(f) {\n    return function () {\n      return call.apply(f, arguments);\n    };\n  } // This is equivalent, but slower:\n  // uncurryThis = Function_bind.bind(Function_bind.call);\n  // http://jsperf.com/uncurrythis\n\n\n  var array_slice = uncurryThis(Array.prototype.slice);\n  var array_reduce = uncurryThis(Array.prototype.reduce || function (callback, basis) {\n    var index = 0,\n        length = this.length; // concerning the initial value, if one is not provided\n\n    if (arguments.length === 1) {\n      // seek to the first value in the array, accounting\n      // for the possibility that is is a sparse array\n      do {\n        if (index in this) {\n          basis = this[index++];\n          break;\n        }\n\n        if (++index >= length) {\n          throw new TypeError();\n        }\n      } while (1);\n    } // reduce\n\n\n    for (; index < length; index++) {\n      // account for the possibility that the array is sparse\n      if (index in this) {\n        basis = callback(basis, this[index], index);\n      }\n    }\n\n    return basis;\n  });\n  var array_indexOf = uncurryThis(Array.prototype.indexOf || function (value) {\n    // not a very good shim, but good enough for our one use of it\n    for (var i = 0; i < this.length; i++) {\n      if (this[i] === value) {\n        return i;\n      }\n    }\n\n    return -1;\n  });\n  var array_map = uncurryThis(Array.prototype.map || function (callback, thisp) {\n    var self = this;\n    var collect = [];\n    array_reduce(self, function (undefined, value, index) {\n      collect.push(callback.call(thisp, value, index, self));\n    }, void 0);\n    return collect;\n  });\n\n  var object_create = Object.create || function (prototype) {\n    function Type() {}\n\n    Type.prototype = prototype;\n    return new Type();\n  };\n\n  var object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n  };\n\n  var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\n  var object_keys = Object.keys || function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      if (object_hasOwnProperty(object, key)) {\n        keys.push(key);\n      }\n    }\n\n    return keys;\n  };\n\n  var object_toString = uncurryThis(Object.prototype.toString);\n\n  function isObject(value) {\n    return value === Object(value);\n  } // generator related shims\n  // FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n\n\n  function isStopIteration(exception) {\n    return object_toString(exception) === \"[object StopIteration]\" || exception instanceof QReturnValue;\n  } // FIXME: Remove this helper and Q.return once ES6 generators are in\n  // SpiderMonkey.\n\n\n  var QReturnValue;\n\n  if (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n  } else {\n    QReturnValue = function QReturnValue(value) {\n      this.value = value;\n    };\n  } // long stack traces\n\n\n  var STACK_JUMP_SEPARATOR = \"From previous event:\";\n\n  function makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks && promise.stack && typeof error === \"object\" && error !== null && error.stack) {\n      var stacks = [];\n\n      for (var p = promise; !!p; p = p.source) {\n        if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n          object_defineProperty(error, \"__minimumStackCounter__\", {\n            value: p.stackCounter,\n            configurable: true\n          });\n          stacks.unshift(p.stack);\n        }\n      }\n\n      stacks.unshift(error.stack);\n      var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n      var stack = filterStackString(concatedStacks);\n      object_defineProperty(error, \"stack\", {\n        value: stack,\n        configurable: true\n      });\n    }\n  }\n\n  function filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n\n    for (var i = 0; i < lines.length; ++i) {\n      var line = lines[i];\n\n      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n        desiredLines.push(line);\n      }\n    }\n\n    return desiredLines.join(\"\\n\");\n  }\n\n  function isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 || stackLine.indexOf(\"(node.js:\") !== -1;\n  }\n\n  function getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n\n    if (attempt1) {\n      return [attempt1[1], Number(attempt1[2])];\n    } // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n\n\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n\n    if (attempt2) {\n      return [attempt2[1], Number(attempt2[2])];\n    } // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n\n\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n\n    if (attempt3) {\n      return [attempt3[1], Number(attempt3[2])];\n    }\n  }\n\n  function isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n      return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n    return fileName === qFileName && lineNumber >= qStartingLine && lineNumber <= qEndingLine;\n  } // discover own file name and line number range for filtering stack\n  // traces\n\n\n  function captureLine() {\n    if (!hasStacks) {\n      return;\n    }\n\n    try {\n      throw new Error();\n    } catch (e) {\n      var lines = e.stack.split(\"\\n\");\n      var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n\n      if (!fileNameAndLineNumber) {\n        return;\n      }\n\n      qFileName = fileNameAndLineNumber[0];\n      return fileNameAndLineNumber[1];\n    }\n  }\n\n  function deprecate(callback, name, alternative) {\n    return function () {\n      if (typeof console !== \"undefined\" && typeof console.warn === \"function\") {\n        console.warn(name + \" is deprecated, use \" + alternative + \" instead.\", new Error(\"\").stack);\n      }\n\n      return callback.apply(callback, arguments);\n    };\n  } // end of shims\n  // beginning of real work\n\n  /**\n   * Constructs a promise for an immediate reference, passes promises through, or\n   * coerces promises from different systems.\n   * @param value immediate reference or promise\n   */\n\n\n  function Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n      return value;\n    } // assimilate thenables\n\n\n    if (isPromiseAlike(value)) {\n      return coerce(value);\n    } else {\n      return fulfill(value);\n    }\n  }\n\n  Q.resolve = Q;\n  /**\n   * Performs a task in a future turn of the event loop.\n   * @param {Function} task\n   */\n\n  Q.nextTick = nextTick;\n  /**\n   * Controls whether or not long stack traces will be on\n   */\n\n  Q.longStackSupport = false;\n  /**\n   * The counter is used to determine the stopping point for building\n   * long stack traces. In makeStackTraceLong we walk backwards through\n   * the linked list of promises, only stacks which were created before\n   * the rejection are concatenated.\n   */\n\n  var longStackCounter = 1; // enable long stacks if Q_DEBUG is set\n\n  if (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n  }\n  /**\n   * Constructs a {promise, resolve, reject} object.\n   *\n   * `resolve` is a callback to invoke with a more resolved value for the\n   * promise. To fulfill the promise, invoke `resolve` with any value that is\n   * not a thenable. To reject the promise, invoke `resolve` with a rejected\n   * thenable, or invoke `reject` with the reason directly. To resolve the\n   * promise to another thenable, thus putting it in the same state, invoke\n   * `resolve` with that other thenable.\n   */\n\n\n  Q.defer = defer;\n\n  function defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [],\n        progressListeners = [],\n        resolvedPromise;\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n      var args = array_slice(arguments);\n\n      if (messages) {\n        messages.push(args);\n\n        if (op === \"when\" && operands[1]) {\n          // progress operand\n          progressListeners.push(operands[1]);\n        }\n      } else {\n        Q.nextTick(function () {\n          resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n        });\n      }\n    }; // XXX deprecated\n\n\n    promise.valueOf = function () {\n      if (messages) {\n        return promise;\n      }\n\n      var nearerValue = nearer(resolvedPromise);\n\n      if (isPromise(nearerValue)) {\n        resolvedPromise = nearerValue; // shorten chain\n      }\n\n      return nearerValue;\n    };\n\n    promise.inspect = function () {\n      if (!resolvedPromise) {\n        return {\n          state: \"pending\"\n        };\n      }\n\n      return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n      try {\n        throw new Error();\n      } catch (e) {\n        // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n        // accessor around; that causes memory leaks as per GH-111. Just\n        // reify the stack trace as a string ASAP.\n        //\n        // At the same time, cut off the first line; it's always just\n        // \"[object Promise]\\n\", as per the `toString`.\n        promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        promise.stackCounter = longStackCounter++;\n      }\n    } // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n\n    function become(newPromise) {\n      resolvedPromise = newPromise;\n\n      if (Q.longStackSupport && hasStacks) {\n        // Only hold a reference to the new promise if long stacks\n        // are enabled to reduce memory usage\n        promise.source = newPromise;\n      }\n\n      array_reduce(messages, function (undefined, message) {\n        Q.nextTick(function () {\n          newPromise.promiseDispatch.apply(newPromise, message);\n        });\n      }, void 0);\n      messages = void 0;\n      progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n\n    deferred.resolve = function (value) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      become(fulfill(value));\n    };\n\n    deferred.reject = function (reason) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      become(reject(reason));\n    };\n\n    deferred.notify = function (progress) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      array_reduce(progressListeners, function (undefined, progressListener) {\n        Q.nextTick(function () {\n          progressListener(progress);\n        });\n      }, void 0);\n    };\n\n    return deferred;\n  }\n  /**\n   * Creates a Node-style callback that will resolve or reject the deferred\n   * promise.\n   * @returns a nodeback\n   */\n\n\n  defer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n      if (error) {\n        self.reject(error);\n      } else if (arguments.length > 2) {\n        self.resolve(array_slice(arguments, 1));\n      } else {\n        self.resolve(value);\n      }\n    };\n  };\n  /**\n   * @param resolver {Function} a function that returns nothing and accepts\n   * the resolve, reject, and notify functions for a deferred.\n   * @returns a promise that may be resolved with the given resolve and reject\n   * functions, or rejected by a thrown exception in resolver\n   */\n\n\n  Q.Promise = promise; // ES6\n\n  Q.promise = promise;\n\n  function promise(resolver) {\n    if (typeof resolver !== \"function\") {\n      throw new TypeError(\"resolver must be a function.\");\n    }\n\n    var deferred = defer();\n\n    try {\n      resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n      deferred.reject(reason);\n    }\n\n    return deferred.promise;\n  }\n\n  promise.race = race; // ES6\n\n  promise.all = all; // ES6\n\n  promise.reject = reject; // ES6\n\n  promise.resolve = Q; // ES6\n  // XXX experimental.  This method is a way to denote that a local value is\n  // serializable and should be immediately dispatched to a remote upon request,\n  // instead of passing a reference.\n\n  Q.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n  };\n\n  Promise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n  };\n  /**\n   * If two promises eventually fulfill to the same value, promises that value,\n   * but otherwise rejects.\n   * @param x {Any*}\n   * @param y {Any*}\n   * @returns {Any*} a promise for x and y if they are the same, but a rejection\n   * otherwise.\n   *\n   */\n\n\n  Q.join = function (x, y) {\n    return Q(x).join(y);\n  };\n\n  Promise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n      if (x === y) {\n        // TODO: \"===\" should be Object.is or equiv\n        return x;\n      } else {\n        throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n      }\n    });\n  };\n  /**\n   * Returns a promise for the first of an array of promises to become settled.\n   * @param answers {Array[Any*]} promises to race\n   * @returns {Any*} the first promise to be settled\n   */\n\n\n  Q.race = race;\n\n  function race(answerPs) {\n    return promise(function (resolve, reject) {\n      // Switch to this once we can assume at least ES5\n      // answerPs.forEach(function (answerP) {\n      //     Q(answerP).then(resolve, reject);\n      // });\n      // Use this in the meantime\n      for (var i = 0, len = answerPs.length; i < len; i++) {\n        Q(answerPs[i]).then(resolve, reject);\n      }\n    });\n  }\n\n  Promise.prototype.race = function () {\n    return this.then(Q.race);\n  };\n  /**\n   * Constructs a Promise with a promise descriptor object and optional fallback\n   * function.  The descriptor contains methods like when(rejected), get(name),\n   * set(name, value), post(name, args), and delete(name), which all\n   * return either a value, a promise for a value, or a rejection.  The fallback\n   * accepts the operation name, a resolver, and any further arguments that would\n   * have been forwarded to the appropriate method above had a method been\n   * provided with the proper name.  The API makes no guarantees about the nature\n   * of the returned object, apart from that it is usable whereever promises are\n   * bought and sold.\n   */\n\n\n  Q.makePromise = Promise;\n\n  function Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n      fallback = function fallback(op) {\n        return reject(new Error(\"Promise does not support operation: \" + op));\n      };\n    }\n\n    if (inspect === void 0) {\n      inspect = function inspect() {\n        return {\n          state: \"unknown\"\n        };\n      };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n      var result;\n\n      try {\n        if (descriptor[op]) {\n          result = descriptor[op].apply(promise, args);\n        } else {\n          result = fallback.call(promise, op, args);\n        }\n      } catch (exception) {\n        result = reject(exception);\n      }\n\n      if (resolve) {\n        resolve(result);\n      }\n    };\n\n    promise.inspect = inspect; // XXX deprecated `valueOf` and `exception` support\n\n    if (inspect) {\n      var inspected = inspect();\n\n      if (inspected.state === \"rejected\") {\n        promise.exception = inspected.reason;\n      }\n\n      promise.valueOf = function () {\n        var inspected = inspect();\n\n        if (inspected.state === \"pending\" || inspected.state === \"rejected\") {\n          return promise;\n        }\n\n        return inspected.value;\n      };\n    }\n\n    return promise;\n  }\n\n  Promise.prototype.toString = function () {\n    return \"[object Promise]\";\n  };\n\n  Promise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false; // ensure the untrusted promise makes at most a\n    // single call to one of the callbacks\n\n    function _fulfilled(value) {\n      try {\n        return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n      } catch (exception) {\n        return reject(exception);\n      }\n    }\n\n    function _rejected(exception) {\n      if (typeof rejected === \"function\") {\n        makeStackTraceLong(exception, self);\n\n        try {\n          return rejected(exception);\n        } catch (newException) {\n          return reject(newException);\n        }\n      }\n\n      return reject(exception);\n    }\n\n    function _progressed(value) {\n      return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n      self.promiseDispatch(function (value) {\n        if (done) {\n          return;\n        }\n\n        done = true;\n        deferred.resolve(_fulfilled(value));\n      }, \"when\", [function (exception) {\n        if (done) {\n          return;\n        }\n\n        done = true;\n        deferred.resolve(_rejected(exception));\n      }]);\n    }); // Progress propagator need to be attached in the current tick.\n\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n      var newValue;\n      var threw = false;\n\n      try {\n        newValue = _progressed(value);\n      } catch (e) {\n        threw = true;\n\n        if (Q.onerror) {\n          Q.onerror(e);\n        } else {\n          throw e;\n        }\n      }\n\n      if (!threw) {\n        deferred.notify(newValue);\n      }\n    }]);\n    return deferred.promise;\n  };\n\n  Q.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n  };\n  /**\n   * Works almost like \"finally\", but not called for rejections.\n   * Original resolution value is passed through callback unaffected.\n   * Callback may return a promise that will be awaited for.\n   * @param {Function} callback\n   * @returns {Q.Promise}\n   * @example\n   * doSomething()\n   *   .then(...)\n   *   .tap(console.log)\n   *   .then(...);\n   */\n\n\n  Promise.prototype.tap = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n      return callback.fcall(value).thenResolve(value);\n    });\n  };\n  /**\n   * Registers an observer on a promise.\n   *\n   * Guarantees:\n   *\n   * 1. that fulfilled and rejected will be called only once.\n   * 2. that either the fulfilled callback or the rejected callback will be\n   *    called, but not both.\n   * 3. that fulfilled and rejected will not be called in this turn.\n   *\n   * @param value      promise or immediate reference to observe\n   * @param fulfilled  function to be called with the fulfilled value\n   * @param rejected   function to be called with the rejection exception\n   * @param progressed function to be called on any progress notifications\n   * @return promise for the return value from the invoked callback\n   */\n\n\n  Q.when = when;\n\n  function when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n  }\n\n  Promise.prototype.thenResolve = function (value) {\n    return this.then(function () {\n      return value;\n    });\n  };\n\n  Q.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n  };\n\n  Promise.prototype.thenReject = function (reason) {\n    return this.then(function () {\n      throw reason;\n    });\n  };\n\n  Q.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n  };\n  /**\n   * If an object is not a promise, it is as \"near\" as possible.\n   * If a promise is rejected, it is as \"near\" as possible too.\n   * If it’s a fulfilled promise, the fulfillment value is nearer.\n   * If it’s a deferred promise and the deferred has been resolved, the\n   * resolution is \"nearer\".\n   * @param object\n   * @returns most resolved (nearest) form of the object\n   */\n  // XXX should we re-do this?\n\n\n  Q.nearer = nearer;\n\n  function nearer(value) {\n    if (isPromise(value)) {\n      var inspected = value.inspect();\n\n      if (inspected.state === \"fulfilled\") {\n        return inspected.value;\n      }\n    }\n\n    return value;\n  }\n  /**\n   * @returns whether the given object is a promise.\n   * Otherwise it is a fulfilled value.\n   */\n\n\n  Q.isPromise = isPromise;\n\n  function isPromise(object) {\n    return object instanceof Promise;\n  }\n\n  Q.isPromiseAlike = isPromiseAlike;\n\n  function isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n  }\n  /**\n   * @returns whether the given object is a pending promise, meaning not\n   * fulfilled or rejected.\n   */\n\n\n  Q.isPending = isPending;\n\n  function isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n  }\n\n  Promise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n  };\n  /**\n   * @returns whether the given object is a value or fulfilled\n   * promise.\n   */\n\n\n  Q.isFulfilled = isFulfilled;\n\n  function isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n  }\n\n  Promise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n  };\n  /**\n   * @returns whether the given object is a rejected promise.\n   */\n\n\n  Q.isRejected = isRejected;\n\n  function isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n  }\n\n  Promise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n  }; //// BEGIN UNHANDLED REJECTION TRACKING\n  // This promise library consumes exceptions thrown in handlers so they can be\n  // handled by a subsequent promise.  The exceptions get added to this array when\n  // they are created, and removed when they are handled.  Note that in ES6 or\n  // shimmed environments, this would naturally be a `Set`.\n\n\n  var unhandledReasons = [];\n  var unhandledRejections = [];\n  var reportedUnhandledRejections = [];\n  var trackUnhandledRejections = true;\n\n  function resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n      trackUnhandledRejections = true;\n    }\n  }\n\n  function trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n      return;\n    }\n\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n      Q.nextTick.runAfter(function () {\n        if (array_indexOf(unhandledRejections, promise) !== -1) {\n          process.emit(\"unhandledRejection\", reason, promise);\n          reportedUnhandledRejections.push(promise);\n        }\n      });\n    }\n\n    unhandledRejections.push(promise);\n\n    if (reason && typeof reason.stack !== \"undefined\") {\n      unhandledReasons.push(reason.stack);\n    } else {\n      unhandledReasons.push(\"(no stack) \" + reason);\n    }\n  }\n\n  function untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n      return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n\n    if (at !== -1) {\n      if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n          var atReport = array_indexOf(reportedUnhandledRejections, promise);\n\n          if (atReport !== -1) {\n            process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n            reportedUnhandledRejections.splice(atReport, 1);\n          }\n        });\n      }\n\n      unhandledRejections.splice(at, 1);\n      unhandledReasons.splice(at, 1);\n    }\n  }\n\n  Q.resetUnhandledRejections = resetUnhandledRejections;\n\n  Q.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n  };\n\n  Q.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n  };\n\n  resetUnhandledRejections(); //// END UNHANDLED REJECTION TRACKING\n\n  /**\n   * Constructs a rejected promise.\n   * @param reason value describing the failure\n   */\n\n  Q.reject = reject;\n\n  function reject(reason) {\n    var rejection = Promise({\n      \"when\": function when(rejected) {\n        // note that the error has been handled\n        if (rejected) {\n          untrackRejection(this);\n        }\n\n        return rejected ? rejected(reason) : this;\n      }\n    }, function fallback() {\n      return this;\n    }, function inspect() {\n      return {\n        state: \"rejected\",\n        reason: reason\n      };\n    }); // Note that the reason has not been handled.\n\n    trackRejection(rejection, reason);\n    return rejection;\n  }\n  /**\n   * Constructs a fulfilled promise for an immediate reference.\n   * @param value immediate reference\n   */\n\n\n  Q.fulfill = fulfill;\n\n  function fulfill(value) {\n    return Promise({\n      \"when\": function when() {\n        return value;\n      },\n      \"get\": function get(name) {\n        return value[name];\n      },\n      \"set\": function set(name, rhs) {\n        value[name] = rhs;\n      },\n      \"delete\": function _delete(name) {\n        delete value[name];\n      },\n      \"post\": function post(name, args) {\n        // Mark Miller proposes that post with no name should apply a\n        // promised function.\n        if (name === null || name === void 0) {\n          return value.apply(void 0, args);\n        } else {\n          return value[name].apply(value, args);\n        }\n      },\n      \"apply\": function apply(thisp, args) {\n        return value.apply(thisp, args);\n      },\n      \"keys\": function keys() {\n        return object_keys(value);\n      }\n    }, void 0, function inspect() {\n      return {\n        state: \"fulfilled\",\n        value: value\n      };\n    });\n  }\n  /**\n   * Converts thenables to Q promises.\n   * @param promise thenable promise\n   * @returns a Q promise\n   */\n\n\n  function coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n      try {\n        promise.then(deferred.resolve, deferred.reject, deferred.notify);\n      } catch (exception) {\n        deferred.reject(exception);\n      }\n    });\n    return deferred.promise;\n  }\n  /**\n   * Annotates an object such that it will never be\n   * transferred away from this process over any promise\n   * communication channel.\n   * @param object\n   * @returns promise a wrapping of that object that\n   * additionally responds to the \"isDef\" message\n   * without a rejection.\n   */\n\n\n  Q.master = master;\n\n  function master(object) {\n    return Promise({\n      \"isDef\": function isDef() {}\n    }, function fallback(op, args) {\n      return dispatch(object, op, args);\n    }, function () {\n      return Q(object).inspect();\n    });\n  }\n  /**\n   * Spreads the values of a promised array of arguments into the\n   * fulfillment callback.\n   * @param fulfilled callback that receives variadic arguments from the\n   * promised array\n   * @param rejected callback that receives the exception if the promise\n   * is rejected.\n   * @returns a promise for the return value or thrown exception of\n   * either callback.\n   */\n\n\n  Q.spread = spread;\n\n  function spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n  }\n\n  Promise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n      return fulfilled.apply(void 0, array);\n    }, rejected);\n  };\n  /**\n   * The async function is a decorator for generator functions, turning\n   * them into asynchronous generators.  Although generators are only part\n   * of the newest ECMAScript 6 drafts, this code does not cause syntax\n   * errors in older engines.  This code should continue to work and will\n   * in fact improve over time as the language improves.\n   *\n   * ES6 generators are currently part of V8 version 3.19 with the\n   * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n   * for longer, but under an older Python-inspired form.  This function\n   * works on both kinds of generators.\n   *\n   * Decorates a generator function such that:\n   *  - it may yield promises\n   *  - execution will continue when that promise is fulfilled\n   *  - the value of the yield expression will be the fulfilled value\n   *  - it returns a promise for the return value (when the generator\n   *    stops iterating)\n   *  - the decorated function returns a promise for the return value\n   *    of the generator or the first rejected promise among those\n   *    yielded.\n   *  - if an error is thrown in the generator, it propagates through\n   *    every following yield until it is caught, or until it escapes\n   *    the generator function altogether, and is translated into a\n   *    rejection for the promise returned by the decorated generator.\n   */\n\n\n  Q.async = async;\n\n  function async(makeGenerator) {\n    return function () {\n      // when verb is \"send\", arg is a value\n      // when verb is \"throw\", arg is an exception\n      function continuer(verb, arg) {\n        var result; // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n        // engine that has a deployed base of browsers that support generators.\n        // However, SM's generators use the Python-inspired semantics of\n        // outdated ES6 drafts.  We would like to support ES6, but we'd also\n        // like to make it possible to use generators in deployed browsers, so\n        // we also support Python-style generators.  At some point we can remove\n        // this block.\n\n        if (typeof StopIteration === \"undefined\") {\n          // ES6 Generators\n          try {\n            result = generator[verb](arg);\n          } catch (exception) {\n            return reject(exception);\n          }\n\n          if (result.done) {\n            return Q(result.value);\n          } else {\n            return when(result.value, callback, errback);\n          }\n        } else {\n          // SpiderMonkey Generators\n          // FIXME: Remove this case when SM does ES6 generators.\n          try {\n            result = generator[verb](arg);\n          } catch (exception) {\n            if (isStopIteration(exception)) {\n              return Q(exception.value);\n            } else {\n              return reject(exception);\n            }\n          }\n\n          return when(result, callback, errback);\n        }\n      }\n\n      var generator = makeGenerator.apply(this, arguments);\n      var callback = continuer.bind(continuer, \"next\");\n      var errback = continuer.bind(continuer, \"throw\");\n      return callback();\n    };\n  }\n  /**\n   * The spawn function is a small wrapper around async that immediately\n   * calls the generator and also ends the promise chain, so that any\n   * unhandled errors are thrown instead of forwarded to the error\n   * handler. This is useful because it's extremely common to run\n   * generators at the top-level to work with libraries.\n   */\n\n\n  Q.spawn = spawn;\n\n  function spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n  } // FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n\n  /**\n   * Throws a ReturnValue exception to stop an asynchronous generator.\n   *\n   * This interface is a stop-gap measure to support generator return\n   * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n   * generators like Chromium 29, just use \"return\" in your generator\n   * functions.\n   *\n   * @param value the return value for the surrounding generator\n   * @throws ReturnValue exception with the value.\n   * @example\n   * // ES6 style\n   * Q.async(function* () {\n   *      var foo = yield getFooPromise();\n   *      var bar = yield getBarPromise();\n   *      return foo + bar;\n   * })\n   * // Older SpiderMonkey style\n   * Q.async(function () {\n   *      var foo = yield getFooPromise();\n   *      var bar = yield getBarPromise();\n   *      Q.return(foo + bar);\n   * })\n   */\n\n\n  Q[\"return\"] = _return;\n\n  function _return(value) {\n    throw new QReturnValue(value);\n  }\n  /**\n   * The promised function decorator ensures that any promise arguments\n   * are settled and passed as values (`this` is also settled and passed\n   * as a value).  It will also ensure that the result of a function is\n   * always a promise.\n   *\n   * @example\n   * var add = Q.promised(function (a, b) {\n   *     return a + b;\n   * });\n   * add(Q(a), Q(B));\n   *\n   * @param {function} callback The function to decorate\n   * @returns {function} a function that has been decorated.\n   */\n\n\n  Q.promised = promised;\n\n  function promised(callback) {\n    return function () {\n      return spread([this, all(arguments)], function (self, args) {\n        return callback.apply(self, args);\n      });\n    };\n  }\n  /**\n   * sends a message to a value in a future turn\n   * @param object* the recipient\n   * @param op the name of the message operation, e.g., \"when\",\n   * @param args further arguments to be forwarded to the operation\n   * @returns result {Promise} a promise for the result of the operation\n   */\n\n\n  Q.dispatch = dispatch;\n\n  function dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n  }\n\n  Promise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n      self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n  };\n  /**\n   * Gets the value of a property in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @param name      name of property to get\n   * @return promise for the property value\n   */\n\n\n  Q.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n  };\n\n  Promise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n  };\n  /**\n   * Sets the value of a property in a future turn.\n   * @param object    promise or immediate reference for object object\n   * @param name      name of property to set\n   * @param value     new value of property\n   * @return promise for the return value\n   */\n\n\n  Q.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n  };\n\n  Promise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n  };\n  /**\n   * Deletes a property in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @param name      name of property to delete\n   * @return promise for the return value\n   */\n\n\n  Q.del = // XXX legacy\n  Q[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n  };\n\n  Promise.prototype.del = // XXX legacy\n  Promise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n  };\n  /**\n   * Invokes a method in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @param name      name of method to invoke\n   * @param value     a value to post, typically an array of\n   *                  invocation arguments for promises that\n   *                  are ultimately backed with `resolve` values,\n   *                  as opposed to those backed with URLs\n   *                  wherein the posted value can be any\n   *                  JSON serializable object.\n   * @return promise for the return value\n   */\n  // bound locally because it is used by other methods\n\n\n  Q.mapply = // XXX As proposed by \"Redsandro\"\n  Q.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n  };\n\n  Promise.prototype.mapply = // XXX As proposed by \"Redsandro\"\n  Promise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n  };\n  /**\n   * Invokes a method in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @param name      name of method to invoke\n   * @param ...args   array of invocation arguments\n   * @return promise for the return value\n   */\n\n\n  Q.send = // XXX Mark Miller's proposed parlance\n  Q.mcall = // XXX As proposed by \"Redsandro\"\n  Q.invoke = function (object, name\n  /*...args*/\n  ) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n  };\n\n  Promise.prototype.send = // XXX Mark Miller's proposed parlance\n  Promise.prototype.mcall = // XXX As proposed by \"Redsandro\"\n  Promise.prototype.invoke = function (name\n  /*...args*/\n  ) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n  };\n  /**\n   * Applies the promised function in a future turn.\n   * @param object    promise or immediate reference for target function\n   * @param args      array of application arguments\n   */\n\n\n  Q.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n  };\n\n  Promise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n  };\n  /**\n   * Calls the promised function in a future turn.\n   * @param object    promise or immediate reference for target function\n   * @param ...args   array of application arguments\n   */\n\n\n  Q[\"try\"] = Q.fcall = function (object\n  /* ...args*/\n  ) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n  };\n\n  Promise.prototype.fcall = function ()\n  /*...args*/\n  {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n  };\n  /**\n   * Binds the promised function, transforming return values into a fulfilled\n   * promise and thrown errors into a rejected one.\n   * @param object    promise or immediate reference for target function\n   * @param ...args   array of application arguments\n   */\n\n\n  Q.fbind = function (object\n  /*...args*/\n  ) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n      return promise.dispatch(\"apply\", [this, args.concat(array_slice(arguments))]);\n    };\n  };\n\n  Promise.prototype.fbind = function ()\n  /*...args*/\n  {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n      return promise.dispatch(\"apply\", [this, args.concat(array_slice(arguments))]);\n    };\n  };\n  /**\n   * Requests the names of the owned properties of a promised\n   * object in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @return promise for the keys of the eventually settled object\n   */\n\n\n  Q.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n  };\n\n  Promise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n  };\n  /**\n   * Turns an array of promises into a promise for an array.  If any of\n   * the promises gets rejected, the whole array is rejected immediately.\n   * @param {Array*} an array (or promise for an array) of values (or\n   * promises for values)\n   * @returns a promise for an array of the corresponding values\n   */\n  // By Mark Miller\n  // http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n\n\n  Q.all = all;\n\n  function all(promises) {\n    return when(promises, function (promises) {\n      var pendingCount = 0;\n      var deferred = defer();\n      array_reduce(promises, function (undefined, promise, index) {\n        var snapshot;\n\n        if (isPromise(promise) && (snapshot = promise.inspect()).state === \"fulfilled\") {\n          promises[index] = snapshot.value;\n        } else {\n          ++pendingCount;\n          when(promise, function (value) {\n            promises[index] = value;\n\n            if (--pendingCount === 0) {\n              deferred.resolve(promises);\n            }\n          }, deferred.reject, function (progress) {\n            deferred.notify({\n              index: index,\n              value: progress\n            });\n          });\n        }\n      }, void 0);\n\n      if (pendingCount === 0) {\n        deferred.resolve(promises);\n      }\n\n      return deferred.promise;\n    });\n  }\n\n  Promise.prototype.all = function () {\n    return all(this);\n  };\n  /**\n   * Returns the first resolved promise of an array. Prior rejected promises are\n   * ignored.  Rejects only if all promises are rejected.\n   * @param {Array*} an array containing values or promises for values\n   * @returns a promise fulfilled with the value of the first resolved promise,\n   * or a rejected promise if all promises are rejected.\n   */\n\n\n  Q.any = any;\n\n  function any(promises) {\n    if (promises.length === 0) {\n      return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n      var promise = promises[index];\n      pendingCount++;\n      when(promise, onFulfilled, onRejected, onProgress);\n\n      function onFulfilled(result) {\n        deferred.resolve(result);\n      }\n\n      function onRejected(err) {\n        pendingCount--;\n\n        if (pendingCount === 0) {\n          var rejection = err || new Error(\"\" + err);\n          rejection.message = \"Q can't get fulfillment value from any promise, all \" + \"promises were rejected. Last error message: \" + rejection.message;\n          deferred.reject(rejection);\n        }\n      }\n\n      function onProgress(progress) {\n        deferred.notify({\n          index: index,\n          value: progress\n        });\n      }\n    }, undefined);\n    return deferred.promise;\n  }\n\n  Promise.prototype.any = function () {\n    return any(this);\n  };\n  /**\n   * Waits for all promises to be settled, either fulfilled or\n   * rejected.  This is distinct from `all` since that would stop\n   * waiting at the first rejection.  The promise returned by\n   * `allResolved` will never be rejected.\n   * @param promises a promise for an array (or an array) of promises\n   * (or values)\n   * @return a promise for an array of promises\n   */\n\n\n  Q.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n\n  function allResolved(promises) {\n    return when(promises, function (promises) {\n      promises = array_map(promises, Q);\n      return when(all(array_map(promises, function (promise) {\n        return when(promise, noop, noop);\n      })), function () {\n        return promises;\n      });\n    });\n  }\n\n  Promise.prototype.allResolved = function () {\n    return allResolved(this);\n  };\n  /**\n   * @see Promise#allSettled\n   */\n\n\n  Q.allSettled = allSettled;\n\n  function allSettled(promises) {\n    return Q(promises).allSettled();\n  }\n  /**\n   * Turns an array of promises into a promise for an array of their states (as\n   * returned by `inspect`) when they have all settled.\n   * @param {Array[Any*]} values an array (or promise for an array) of values (or\n   * promises for values)\n   * @returns {Array[State]} an array of states for the respective values.\n   */\n\n\n  Promise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n      return all(array_map(promises, function (promise) {\n        promise = Q(promise);\n\n        function regardless() {\n          return promise.inspect();\n        }\n\n        return promise.then(regardless, regardless);\n      }));\n    });\n  };\n  /**\n   * Captures the failure of a promise, giving an oportunity to recover\n   * with a callback.  If the given promise is fulfilled, the returned\n   * promise is fulfilled.\n   * @param {Any*} promise for something\n   * @param {Function} callback to fulfill the returned promise if the\n   * given promise is rejected\n   * @returns a promise for the return value of the callback\n   */\n\n\n  Q.fail = // XXX legacy\n  Q[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n  };\n\n  Promise.prototype.fail = // XXX legacy\n  Promise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n  };\n  /**\n   * Attaches a listener that can respond to progress notifications from a\n   * promise's originating deferred. This listener receives the exact arguments\n   * passed to ``deferred.notify``.\n   * @param {Any*} promise for something\n   * @param {Function} callback to receive any progress notifications\n   * @returns the given promise, unchanged\n   */\n\n\n  Q.progress = progress;\n\n  function progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n  }\n\n  Promise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n  };\n  /**\n   * Provides an opportunity to observe the settling of a promise,\n   * regardless of whether the promise is fulfilled or rejected.  Forwards\n   * the resolution to the returned promise when the callback is done.\n   * The callback can return a promise to defer completion.\n   * @param {Any*} promise\n   * @param {Function} callback to observe the resolution of the given\n   * promise, takes no arguments.\n   * @returns a promise for the resolution of the given promise when\n   * ``fin`` is done.\n   */\n\n\n  Q.fin = // XXX legacy\n  Q[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n  };\n\n  Promise.prototype.fin = // XXX legacy\n  Promise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n      throw new Error(\"Q can't apply finally callback\");\n    }\n\n    callback = Q(callback);\n    return this.then(function (value) {\n      return callback.fcall().then(function () {\n        return value;\n      });\n    }, function (reason) {\n      // TODO attempt to recycle the rejection with \"this\".\n      return callback.fcall().then(function () {\n        throw reason;\n      });\n    });\n  };\n  /**\n   * Terminates a chain of promises, forcing rejections to be\n   * thrown as exceptions.\n   * @param {Any*} promise at the end of a chain of promises\n   * @returns nothing\n   */\n\n\n  Q.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n  };\n\n  Promise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function onUnhandledError(error) {\n      // forward to a future turn so that ``when``\n      // does not catch it and turn it into a rejection.\n      Q.nextTick(function () {\n        makeStackTraceLong(error, promise);\n\n        if (Q.onerror) {\n          Q.onerror(error);\n        } else {\n          throw error;\n        }\n      });\n    }; // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n\n\n    var promise = fulfilled || rejected || progress ? this.then(fulfilled, rejected, progress) : this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n      onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n  };\n  /**\n   * Causes a promise to be rejected if it does not get fulfilled before\n   * some milliseconds time out.\n   * @param {Any*} promise\n   * @param {Number} milliseconds timeout\n   * @param {Any*} custom error message or Error object (optional)\n   * @returns a promise for the resolution of the given promise if it is\n   * fulfilled before the timeout, otherwise rejected.\n   */\n\n\n  Q.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n  };\n\n  Promise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n      if (!error || \"string\" === typeof error) {\n        error = new Error(error || \"Timed out after \" + ms + \" ms\");\n        error.code = \"ETIMEDOUT\";\n      }\n\n      deferred.reject(error);\n    }, ms);\n    this.then(function (value) {\n      clearTimeout(timeoutId);\n      deferred.resolve(value);\n    }, function (exception) {\n      clearTimeout(timeoutId);\n      deferred.reject(exception);\n    }, deferred.notify);\n    return deferred.promise;\n  };\n  /**\n   * Returns a promise for the given value (or promised value), some\n   * milliseconds after it resolved. Passes rejections immediately.\n   * @param {Any*} promise\n   * @param {Number} milliseconds\n   * @returns a promise for the resolution of the given promise after milliseconds\n   * time has elapsed since the resolution of the given promise.\n   * If the given promise rejects, that is passed immediately.\n   */\n\n\n  Q.delay = function (object, timeout) {\n    if (timeout === void 0) {\n      timeout = object;\n      object = void 0;\n    }\n\n    return Q(object).delay(timeout);\n  };\n\n  Promise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n      var deferred = defer();\n      setTimeout(function () {\n        deferred.resolve(value);\n      }, timeout);\n      return deferred.promise;\n    });\n  };\n  /**\n   * Passes a continuation to a Node function, which is called with the given\n   * arguments provided as an array, and returns a promise.\n   *\n   *      Q.nfapply(FS.readFile, [__filename])\n   *      .then(function (content) {\n   *      })\n   *\n   */\n\n\n  Q.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n  };\n\n  Promise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n  };\n  /**\n   * Passes a continuation to a Node function, which is called with the given\n   * arguments provided individually, and returns a promise.\n   * @example\n   * Q.nfcall(FS.readFile, __filename)\n   * .then(function (content) {\n   * })\n   *\n   */\n\n\n  Q.nfcall = function (callback\n  /*...args*/\n  ) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n  };\n\n  Promise.prototype.nfcall = function ()\n  /*...args*/\n  {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n  };\n  /**\n   * Wraps a NodeJS continuation passing function and returns an equivalent\n   * version that returns a promise.\n   * @example\n   * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n   * .then(console.log)\n   * .done()\n   */\n\n\n  Q.nfbind = Q.denodeify = function (callback\n  /*...args*/\n  ) {\n    if (callback === undefined) {\n      throw new Error(\"Q can't wrap an undefined function\");\n    }\n\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n      var nodeArgs = baseArgs.concat(array_slice(arguments));\n      var deferred = defer();\n      nodeArgs.push(deferred.makeNodeResolver());\n      Q(callback).fapply(nodeArgs).fail(deferred.reject);\n      return deferred.promise;\n    };\n  };\n\n  Promise.prototype.nfbind = Promise.prototype.denodeify = function ()\n  /*...args*/\n  {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n  };\n\n  Q.nbind = function (callback, thisp\n  /*...args*/\n  ) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n      var nodeArgs = baseArgs.concat(array_slice(arguments));\n      var deferred = defer();\n      nodeArgs.push(deferred.makeNodeResolver());\n\n      function bound() {\n        return callback.apply(thisp, arguments);\n      }\n\n      Q(bound).fapply(nodeArgs).fail(deferred.reject);\n      return deferred.promise;\n    };\n  };\n\n  Promise.prototype.nbind = function ()\n  /*thisp, ...args*/\n  {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n  };\n  /**\n   * Calls a method of a Node-style object that accepts a Node-style\n   * callback with a given array of arguments, plus a provided callback.\n   * @param object an object that has the named method\n   * @param {String} name name of the method of object\n   * @param {Array} args arguments to pass to the method; the callback\n   * will be provided by Q and appended to these arguments.\n   * @returns a promise for the value or error\n   */\n\n\n  Q.nmapply = // XXX As proposed by \"Redsandro\"\n  Q.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n  };\n\n  Promise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\n  Promise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n  /**\n   * Calls a method of a Node-style object that accepts a Node-style\n   * callback, forwarding the given variadic arguments, plus a provided\n   * callback argument.\n   * @param object an object that has the named method\n   * @param {String} name name of the method of object\n   * @param ...args arguments to pass to the method; the callback will\n   * be provided by Q and appended to these arguments.\n   * @returns a promise for the value or error\n   */\n\n\n  Q.nsend = // XXX Based on Mark Miller's proposed \"send\"\n  Q.nmcall = // XXX Based on \"Redsandro's\" proposal\n  Q.ninvoke = function (object, name\n  /*...args*/\n  ) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n\n  Promise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\n  Promise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\n  Promise.prototype.ninvoke = function (name\n  /*...args*/\n  ) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n  /**\n   * If a function would like to support both Node continuation-passing-style and\n   * promise-returning-style, it can end its internal promise chain with\n   * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n   * elects to use a nodeback, the result will be sent there.  If they do not\n   * pass a nodeback, they will receive the result promise.\n   * @param object a result (or a promise for a result)\n   * @param {Function} nodeback a Node.js-style callback\n   * @returns either the promise or nothing\n   */\n\n\n  Q.nodeify = nodeify;\n\n  function nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n  }\n\n  Promise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n      this.then(function (value) {\n        Q.nextTick(function () {\n          nodeback(null, value);\n        });\n      }, function (error) {\n        Q.nextTick(function () {\n          nodeback(error);\n        });\n      });\n    } else {\n      return this;\n    }\n  };\n\n  Q.noConflict = function () {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n  }; // All code before this point will be filtered from stack traces.\n\n\n  var qEndingLine = captureLine();\n  return Q;\n});","var scope = typeof global !== \"undefined\" && global || typeof self !== \"undefined\" && self || window;\nvar apply = Function.prototype.apply; // DOM APIs, for completeness\n\nexports.setTimeout = function () {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\n\nexports.setInterval = function () {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\n\nexports.clearTimeout = exports.clearInterval = function (timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\n\nTimeout.prototype.unref = Timeout.prototype.ref = function () {};\n\nTimeout.prototype.close = function () {\n  this._clearFn.call(scope, this._id);\n}; // Does not start the time, just sets up the members needed.\n\n\nexports.enroll = function (item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function (item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function (item) {\n  clearTimeout(item._idleTimeoutId);\n  var msecs = item._idleTimeout;\n\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout) item._onTimeout();\n    }, msecs);\n  }\n}; // setimmediate attaches itself to the global object\n\n\nrequire(\"setimmediate\"); // On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\n\n\nexports.setImmediate = typeof self !== \"undefined\" && self.setImmediate || typeof global !== \"undefined\" && global.setImmediate || this && this.setImmediate;\nexports.clearImmediate = typeof self !== \"undefined\" && self.clearImmediate || typeof global !== \"undefined\" && global.clearImmediate || this && this.clearImmediate;","(function (global, undefined) {\n  \"use strict\";\n\n  if (global.setImmediate) {\n    return;\n  }\n\n  var nextHandle = 1; // Spec says greater than zero\n\n  var tasksByHandle = {};\n  var currentlyRunningATask = false;\n  var doc = global.document;\n  var registerImmediate;\n\n  function setImmediate(callback) {\n    // Callback can either be a function or a string\n    if (typeof callback !== \"function\") {\n      callback = new Function(\"\" + callback);\n    } // Copy function arguments\n\n\n    var args = new Array(arguments.length - 1);\n\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i + 1];\n    } // Store and register the task\n\n\n    var task = {\n      callback: callback,\n      args: args\n    };\n    tasksByHandle[nextHandle] = task;\n    registerImmediate(nextHandle);\n    return nextHandle++;\n  }\n\n  function clearImmediate(handle) {\n    delete tasksByHandle[handle];\n  }\n\n  function run(task) {\n    var callback = task.callback;\n    var args = task.args;\n\n    switch (args.length) {\n      case 0:\n        callback();\n        break;\n\n      case 1:\n        callback(args[0]);\n        break;\n\n      case 2:\n        callback(args[0], args[1]);\n        break;\n\n      case 3:\n        callback(args[0], args[1], args[2]);\n        break;\n\n      default:\n        callback.apply(undefined, args);\n        break;\n    }\n  }\n\n  function runIfPresent(handle) {\n    // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // \"too much recursion\" error.\n      setTimeout(runIfPresent, 0, handle);\n    } else {\n      var task = tasksByHandle[handle];\n\n      if (task) {\n        currentlyRunningATask = true;\n\n        try {\n          run(task);\n        } finally {\n          clearImmediate(handle);\n          currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  function installNextTickImplementation() {\n    registerImmediate = function registerImmediate(handle) {\n      process.nextTick(function () {\n        runIfPresent(handle);\n      });\n    };\n  }\n\n  function canUsePostMessage() {\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `global.postMessage` means something completely different and can't be used for this purpose.\n    if (global.postMessage && !global.importScripts) {\n      var postMessageIsAsynchronous = true;\n      var oldOnMessage = global.onmessage;\n\n      global.onmessage = function () {\n        postMessageIsAsynchronous = false;\n      };\n\n      global.postMessage(\"\", \"*\");\n      global.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n  }\n\n  function installPostMessageImplementation() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n\n    var onGlobalMessage = function onGlobalMessage(event) {\n      if (event.source === global && typeof event.data === \"string\" && event.data.indexOf(messagePrefix) === 0) {\n        runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n\n    if (global.addEventListener) {\n      global.addEventListener(\"message\", onGlobalMessage, false);\n    } else {\n      global.attachEvent(\"onmessage\", onGlobalMessage);\n    }\n\n    registerImmediate = function registerImmediate(handle) {\n      global.postMessage(messagePrefix + handle, \"*\");\n    };\n  }\n\n  function installMessageChannelImplementation() {\n    var channel = new MessageChannel();\n\n    channel.port1.onmessage = function (event) {\n      var handle = event.data;\n      runIfPresent(handle);\n    };\n\n    registerImmediate = function registerImmediate(handle) {\n      channel.port2.postMessage(handle);\n    };\n  }\n\n  function installReadyStateChangeImplementation() {\n    var html = doc.documentElement;\n\n    registerImmediate = function registerImmediate(handle) {\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var script = doc.createElement(\"script\");\n\n      script.onreadystatechange = function () {\n        runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n\n      html.appendChild(script);\n    };\n  }\n\n  function installSetTimeoutImplementation() {\n    registerImmediate = function registerImmediate(handle) {\n      setTimeout(runIfPresent, 0, handle);\n    };\n  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n\n\n  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.\n\n  if ({}.toString.call(global.process) === \"[object process]\") {\n    // For Node.js before 0.9\n    installNextTickImplementation();\n  } else if (canUsePostMessage()) {\n    // For non-IE10 modern browsers\n    installPostMessageImplementation();\n  } else if (global.MessageChannel) {\n    // For web workers, where supported\n    installMessageChannelImplementation();\n  } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n    // For IE 6–8\n    installReadyStateChangeImplementation();\n  } else {\n    // For older browsers\n    installSetTimeoutImplementation();\n  }\n\n  attachTo.setImmediate = setImmediate;\n  attachTo.clearImmediate = clearImmediate;\n})(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self);"],"sourceRoot":""}